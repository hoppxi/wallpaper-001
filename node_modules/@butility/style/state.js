// src/core/css.ts
function addStyles(elements, styles) {
  if (Array.isArray(elements)) {
    elements.forEach((element) => style(element, styles));
  } else {
    style(elements, styles);
  }
  function style(element, styles2) {
    for (const property in styles2) {
      if (styles2.hasOwnProperty(property)) {
        element.style[property] = styles2[property];
      }
    }
  }
}
function resetStyles(element, styles) {
  for (const property in styles) {
    if (styles.hasOwnProperty(property)) {
      element.style[property] = "";
    }
  }
}

// src/core/state.ts
function setStateBasedStyle(element, config) {
  for (const state in config) {
    const value = config[state];
    if (typeof value === "object" && !Array.isArray(value)) {
      const styles = value;
      switch (state) {
        case "hover":
          element.addEventListener(
            "mouseover",
            () => addStyles(element, styles)
          );
          element.addEventListener(
            "mouseout",
            () => resetStyles(element, styles)
          );
          break;
        case "active":
          element.addEventListener(
            "mousedown",
            () => addStyles(element, styles)
          );
          element.addEventListener(
            "mouseup",
            () => resetStyles(element, styles)
          );
          break;
        case "focus":
          element.addEventListener(
            "focus",
            () => addStyles(element, styles)
          );
          element.addEventListener(
            "blur",
            () => resetStyles(element, styles)
          );
          break;
        case "click":
          element.addEventListener(
            "click",
            () => addStyles(element, styles)
          );
          break;
        default:
          console.warn(`Unsupported state: ${state}`);
          break;
      }
    } else if (typeof value === "object" && "eventName" in value) {
      const { eventName, styles } = value;
      element.addEventListener(
        eventName,
        () => addStyles(element, styles)
      );
      element.addEventListener(
        "mouseleave",
        () => resetStyles(element, styles)
      );
    }
  }
}

// src/modules/state.ts
var state_default = setStateBasedStyle;
export {
  state_default as default
};
