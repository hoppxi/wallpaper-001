// src/utils/event.ts
var eventStore = /* @__PURE__ */ new Map();
var dataStore = /* @__PURE__ */ new Map();

// src/core/event.ts
function on(element, event, handler) {
  if (!eventStore.has(element)) {
    eventStore.set(element, /* @__PURE__ */ new Map());
  }
  const eventMap = eventStore.get(element);
  if (!eventMap.has(event)) {
    eventMap.set(event, []);
  }
  eventMap.get(event).push(handler);
  element.addEventListener(event, handler);
}
function off(element, event, handler) {
  const eventMap = eventStore.get(element);
  if (eventMap && eventMap.has(event)) {
    const handlers = eventMap.get(event);
    const index = handlers.indexOf(handler);
    if (index > -1) {
      handlers.splice(index, 1);
      element.removeEventListener(event, handler);
    }
  }
}
function trigger(element, event) {
  const customEvent = new Event(event, { bubbles: true, cancelable: true });
  element.dispatchEvent(customEvent);
}
function once(element, event, handler) {
  const onceHandler = (e) => {
    handler(e);
    off(element, event, onceHandler);
  };
  on(element, event, onceHandler);
}
function delegate(parent, childSelector, event, handler) {
  const delegateHandler = (e) => {
    const target = e.target;
    if (target && target.matches(childSelector)) {
      handler(e);
    }
  };
  on(parent, event, delegateHandler);
}
function setEventData(event, data) {
  dataStore.set(event, data);
}
function getEventData(event) {
  return dataStore.get(event);
}
function triggerEvent(element, eventType, options) {
  const customEvent = new CustomEvent(eventType, {
    bubbles: true,
    cancelable: true,
    ...options
  });
  element.dispatchEvent(customEvent);
}

// src/modules/event.ts
var EventUtils = {
  delegate,
  getEventData,
  off,
  on,
  once,
  setEventData,
  trigger,
  triggerEvent
};
var event_default = EventUtils;
export {
  event_default as default,
  delegate,
  getEventData,
  off,
  on,
  once,
  setEventData,
  trigger,
  triggerEvent
};
